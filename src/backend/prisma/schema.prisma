
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id                     String     @id @default(uuid())
  firstName              String?
  lastName               String?
  alias                  String?
  ethnicity              String?
  gender                 String?
  age                    Int?
  height                 String?
  build                  String?
  distinguishingFeatures String?
  modus                  String?
  isPersonOfInterest     Boolean    @default(false)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt

  // Relations
  incidentsPeople        IncidentPerson[]
  reportedIncidents      Incident[]        @relation("Reporter")
}

model Vehicle {
  id                     String     @id @default(uuid())
  licensePlate           String
  state                  String?
  make                   String?
  model                  String?
  year                   Int?
  color                  String?
  distinguishingFeatures String?
  isVehicleOfInterest    Boolean    @default(false)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt

  // Relations
  incidentsVehicles      IncidentVehicle[]
}

model Location {
  id         String     @id @default(uuid())
  address    String?
  city       String?
  state      String?
  zipCode    String?
  latitude   Float?
  longitude  Float?

  // Relations
  incidents  Incident[]
}

model Evidence {
  id          String     @id @default(uuid())
  name        String
  type        String
  description String?
  fileUrl     String?
  incidentId  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  incident    Incident?  @relation(fields: [incidentId], references: [id])
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String?
  quantity    Int?
  value       Float?
  incidentId  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  incident    Incident?  @relation(fields: [incidentId], references: [id])
}

model Tag {
  id          String     @id @default(uuid())
  name        String     @unique
  color       String?

  // Relations
  incidents   IncidentTag[]
}

model Incident {
  id          String     @id @default(uuid())
  title       String
  eventType   String
  description String
  dateTime    DateTime
  locationId  String?
  reporterId  String?
  status      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  location    Location?  @relation(fields: [locationId], references: [id])
  reporter    Person?    @relation("Reporter", fields: [reporterId], references: [id])
  people      IncidentPerson[]
  vehicles    IncidentVehicle[]
  products    Product[]
  evidence    Evidence[]
  tags        IncidentTag[]
  cases       CaseIncident[]
}

model Case {
  id          String     @id @default(uuid())
  title       String
  description String
  assignedTo  String?
  status      String
  priority    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  incidents   CaseIncident[]
  statusUpdates StatusUpdate[]
}

model StatusUpdate {
  id        String   @id @default(uuid())
  caseId    String
  message   String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  case      Case     @relation(fields: [caseId], references: [id])
}

// Join tables for many-to-many relationships
model IncidentPerson {
  incidentId String
  personId   String
  
  incident   Incident @relation(fields: [incidentId], references: [id])
  person     Person   @relation(fields: [personId], references: [id])

  @@id([incidentId, personId])
}

model IncidentVehicle {
  incidentId String
  vehicleId  String
  
  incident   Incident @relation(fields: [incidentId], references: [id])
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])

  @@id([incidentId, vehicleId])
}

model IncidentTag {
  incidentId String
  tagId      String
  
  incident   Incident @relation(fields: [incidentId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([incidentId, tagId])
}

model CaseIncident {
  caseId     String
  incidentId String
  
  case       Case     @relation(fields: [caseId], references: [id])
  incident   Incident @relation(fields: [incidentId], references: [id])

  @@id([caseId, incidentId])
}
